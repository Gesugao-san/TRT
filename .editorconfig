# =====================================================================
# EditorConfig Configuration
# =====================================================================
#
# Зачем этот файл?
# 1. Единый стиль кода для всей команды
#    - Автоматическое применение правил форматирования
#    - Независимость от настроек IDE/редакторов разработчиков
#
# 2. Синхронизация с системой контроля версий
#    - Согласование с .gitattributes (переносы строк, кодировка)
#    - Если end_of_line не указан, используется автоопределение из .gitattributes
#    - Предотвращение "мусорных" изменений в коммитах
#
# 3. Поддержка всех современных редакторов:
#    - VS Code, IntelliJ, Vim, Sublime Text и др.
#    - Работает даже без плагинов (но с ними - удобнее)
#
# Ключевые возможности:
#   - Управление отступами (пробелы/табы, размер)
#   - Контроль символов переноса строк (LF/CRLF)
#   - Настройки кодировки (UTF-8/BOM)
#   - Управление завершающими пробелами
#
# Полная документация: https://editorconfig.org
# Спецификация: https://spec.editorconfig.org
#
# Важно! Требует EditorConfig-плагина в вашем редакторе.
# Для VS Code: https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig
# Для Notepad++: https://github.com/editorconfig/editorconfig-notepad-plus-plus
# =====================================================================

# Флаг, указывающий, что этот файл является корневым для проекта.
# Когда установлено значение true:
# 1. Редактор прекращает поиск других файлов .editorconfig в родительских директориях
# 2. Все настройки применяются только в рамках текущей директории и её поддиректорий
# 3. Гарантируется, что правила не будут конфликтовать с глобальными настройками системы
#
# Особенно важно использовать в случаях:
# - Когда проект может быть размещён в произвольной директории
# - Для предотвращения наследования нежелательных настроек из родительских папок
# - В монорепозиториях с несколькими независимыми подпроектами
#
# Всегда должен присутствовать в корневом .editorconfig проекта
root = true

# =====================================================================
# Блок общих настроек для ВСЕХ файлов проекта
# =====================================================================
[*]  # Синтаксис подстановки: * означает "любой файл"

# Установка кодировки UTF-8 для всех файлов:
# 1. Гарантирует корректное отображение:
#    - Кириллических символов
#    - Специальных символов (→, ©, 等)
#    - Эмодзи (при необходимости)
# 2. Стандарт де-факто для современной разработки
# 3. Исключает проблемы с "кракозябрами" при:
#    - Совместной работе в разных ОС
#    - Открытии файлов в разных редакторах
# 4. Важно: не включает BOM (Byte Order Mark)
# 
# Переопределяется в секциях для конкретных форматов (см. ниже)
charset = utf-8

# Размер базового отступа (2 пробела):
# 1. Оптимальный баланс между:
#    - Читаемостью (лучше 4 для сложных структур)
#    - Экономией пространства (лучше 1 для плотного кода)
# 2. Рекомендуется для:
#    - Языков с вложенными структурами (YAML, JSON)
#    - Фронтенд-разработки (HTML/CSS/JS)
# 3. Может быть переопределён для конкретных языков:
#    - 4 пробела для Python/Java (см. PEP8/Oracle guidelines)
#    - Табы для Makefiles
# 
# Переопределяется в секциях для конкретных форматов (см. ниже)
indent_size = 2

# Примечания:
# 1. Эти настройки действуют как FALLBACK, если:
#    - Нет специфичных правил для типа файла
#    - Редактор не нашёл других конфигов
# 2. Для переопределения - добавляйте секции [*.расширение]
#    с нужными параметрами ниже в этом файле
# =====================================================================

# Использовать пробелы вместо табуляции для отступов:
# - Обеспечивает единообразное отображение в любом редакторе
# - Исключает проблемы с разной шириной табов в разных IDE
# - Размер отступа контролируется параметром indent_size
indent_style = space

# Удаление пробелов в конце строк:
# - автоматически очищает концы строк при сохранении (рекомендуется для кода)
# - Устраняет "невидимый мусор" в репозитории
# - Соответствует принципам clean code
# 
# Переопределяется в секциях для конкретных форматов (см. ниже)
trim_trailing_whitespace = true

# Всегда добавлять пустую строку в конце файла:
# - Соответствует POSIX-стандарту
# - Упрощает работу с git diff (последняя строка отображается корректно)
# - Предотвращает проблемы с некоторыми компиляторами и интерпретаторами
# - Облегчает конкатенацию файлов
insert_final_newline = true

# end_of_line не указан явно, поэтому редактор будет использовать:
# 1. Автоопределение из .gitattributes (если файл существует)
# 2. Системные настройки по умолчанию (LF для Unix, CRLF для Windows)

### XML (eXtensible Markup Language)
# Документация: https://www.w3.org/TR/xml/
### XSD (XML Schema Definition)
# Документация: https://www.w3.org/XML/Schema
[*.x{ml,sd}]
charset     = utf-8-bom
end_of_line = crlf  # Явное указание для Windows-ориентированных XML-файлов

### Lua
# https://github.com/LuaLS/lua-language-server/blob/master/.editorconfig
# Документация: https://www.lua.org/manual/
### JSON (JavaScript Object Notation)
# Документация: https://www.json.org/json-en.html
[*.{lua,json}]
indent_size = 4

# Markdown
# Документация: https://daringfireball.net/projects/markdown/
[*.md]
# Отключение удаления пробелов для Markdown:
# 1. Сохраняет значимые пробелы в:
#    - Таблицах (выравнивание столбцов)
#    - Блоках кода внутри ``` ```
#    - Поэтических строках с пробелами в конце
# 2. Предотвращает повреждение:
#    - Жёстких переносов (два пробела в конце строки)
#    - Специальных синтаксических конструкций
trim_trailing_whitespace = false
